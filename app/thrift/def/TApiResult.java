/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package thrift.def;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-27")
public class TApiResult implements org.apache.thrift.TBase<TApiResult, TApiResult._Fields>, java.io.Serializable, Cloneable, Comparable<TApiResult> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TApiResult");

  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MESSAGE_FIELD_DESC = new org.apache.thrift.protocol.TField("message", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField RESULT_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("resultData", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DEBUG_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("debugData", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TApiResultStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TApiResultTupleSchemeFactory();

  public int status; // required
  public java.lang.String message; // optional
  /**
   * 
   * @see TDataEncodingType
   */
  public TDataEncodingType dataType; // optional
  public java.nio.ByteBuffer resultData; // optional
  public java.nio.ByteBuffer debugData; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STATUS((short)1, "status"),
    MESSAGE((short)2, "message"),
    /**
     * 
     * @see TDataEncodingType
     */
    DATA_TYPE((short)3, "dataType"),
    RESULT_DATA((short)4, "resultData"),
    DEBUG_DATA((short)5, "debugData");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STATUS
          return STATUS;
        case 2: // MESSAGE
          return MESSAGE;
        case 3: // DATA_TYPE
          return DATA_TYPE;
        case 4: // RESULT_DATA
          return RESULT_DATA;
        case 5: // DEBUG_DATA
          return DEBUG_DATA;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __STATUS_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.MESSAGE,_Fields.DATA_TYPE,_Fields.RESULT_DATA,_Fields.DEBUG_DATA};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MESSAGE, new org.apache.thrift.meta_data.FieldMetaData("message", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TDataEncodingType.class)));
    tmpMap.put(_Fields.RESULT_DATA, new org.apache.thrift.meta_data.FieldMetaData("resultData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.DEBUG_DATA, new org.apache.thrift.meta_data.FieldMetaData("debugData", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TApiResult.class, metaDataMap);
  }

  public TApiResult() {
    this.dataType = thrift.def.TDataEncodingType.JSON_STRING;

  }

  public TApiResult(
    int status)
  {
    this();
    this.status = status;
    setStatusIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TApiResult(TApiResult other) {
    __isset_bitfield = other.__isset_bitfield;
    this.status = other.status;
    if (other.isSetMessage()) {
      this.message = other.message;
    }
    if (other.isSetDataType()) {
      this.dataType = other.dataType;
    }
    if (other.isSetResultData()) {
      this.resultData = org.apache.thrift.TBaseHelper.copyBinary(other.resultData);
    }
    if (other.isSetDebugData()) {
      this.debugData = org.apache.thrift.TBaseHelper.copyBinary(other.debugData);
    }
  }

  public TApiResult deepCopy() {
    return new TApiResult(this);
  }

  @Override
  public void clear() {
    setStatusIsSet(false);
    this.status = 0;
    this.message = null;
    this.dataType = thrift.def.TDataEncodingType.JSON_STRING;

    this.resultData = null;
    this.debugData = null;
  }

  public int getStatus() {
    return this.status;
  }

  public TApiResult setStatus(int status) {
    this.status = status;
    setStatusIsSet(true);
    return this;
  }

  public void unsetStatus() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATUS_ISSET_ID);
  }

  public void setStatusIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATUS_ISSET_ID, value);
  }

  public java.lang.String getMessage() {
    return this.message;
  }

  public TApiResult setMessage(java.lang.String message) {
    this.message = message;
    return this;
  }

  public void unsetMessage() {
    this.message = null;
  }

  /** Returns true if field message is set (has been assigned a value) and false otherwise */
  public boolean isSetMessage() {
    return this.message != null;
  }

  public void setMessageIsSet(boolean value) {
    if (!value) {
      this.message = null;
    }
  }

  /**
   * 
   * @see TDataEncodingType
   */
  public TDataEncodingType getDataType() {
    return this.dataType;
  }

  /**
   * 
   * @see TDataEncodingType
   */
  public TApiResult setDataType(TDataEncodingType dataType) {
    this.dataType = dataType;
    return this;
  }

  public void unsetDataType() {
    this.dataType = null;
  }

  /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
  public boolean isSetDataType() {
    return this.dataType != null;
  }

  public void setDataTypeIsSet(boolean value) {
    if (!value) {
      this.dataType = null;
    }
  }

  public byte[] getResultData() {
    setResultData(org.apache.thrift.TBaseHelper.rightSize(resultData));
    return resultData == null ? null : resultData.array();
  }

  public java.nio.ByteBuffer bufferForResultData() {
    return org.apache.thrift.TBaseHelper.copyBinary(resultData);
  }

  public TApiResult setResultData(byte[] resultData) {
    this.resultData = resultData == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(resultData.clone());
    return this;
  }

  public TApiResult setResultData(java.nio.ByteBuffer resultData) {
    this.resultData = org.apache.thrift.TBaseHelper.copyBinary(resultData);
    return this;
  }

  public void unsetResultData() {
    this.resultData = null;
  }

  /** Returns true if field resultData is set (has been assigned a value) and false otherwise */
  public boolean isSetResultData() {
    return this.resultData != null;
  }

  public void setResultDataIsSet(boolean value) {
    if (!value) {
      this.resultData = null;
    }
  }

  public byte[] getDebugData() {
    setDebugData(org.apache.thrift.TBaseHelper.rightSize(debugData));
    return debugData == null ? null : debugData.array();
  }

  public java.nio.ByteBuffer bufferForDebugData() {
    return org.apache.thrift.TBaseHelper.copyBinary(debugData);
  }

  public TApiResult setDebugData(byte[] debugData) {
    this.debugData = debugData == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(debugData.clone());
    return this;
  }

  public TApiResult setDebugData(java.nio.ByteBuffer debugData) {
    this.debugData = org.apache.thrift.TBaseHelper.copyBinary(debugData);
    return this;
  }

  public void unsetDebugData() {
    this.debugData = null;
  }

  /** Returns true if field debugData is set (has been assigned a value) and false otherwise */
  public boolean isSetDebugData() {
    return this.debugData != null;
  }

  public void setDebugDataIsSet(boolean value) {
    if (!value) {
      this.debugData = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((java.lang.Integer)value);
      }
      break;

    case MESSAGE:
      if (value == null) {
        unsetMessage();
      } else {
        setMessage((java.lang.String)value);
      }
      break;

    case DATA_TYPE:
      if (value == null) {
        unsetDataType();
      } else {
        setDataType((TDataEncodingType)value);
      }
      break;

    case RESULT_DATA:
      if (value == null) {
        unsetResultData();
      } else {
        if (value instanceof byte[]) {
          setResultData((byte[])value);
        } else {
          setResultData((java.nio.ByteBuffer)value);
        }
      }
      break;

    case DEBUG_DATA:
      if (value == null) {
        unsetDebugData();
      } else {
        if (value instanceof byte[]) {
          setDebugData((byte[])value);
        } else {
          setDebugData((java.nio.ByteBuffer)value);
        }
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STATUS:
      return getStatus();

    case MESSAGE:
      return getMessage();

    case DATA_TYPE:
      return getDataType();

    case RESULT_DATA:
      return getResultData();

    case DEBUG_DATA:
      return getDebugData();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STATUS:
      return isSetStatus();
    case MESSAGE:
      return isSetMessage();
    case DATA_TYPE:
      return isSetDataType();
    case RESULT_DATA:
      return isSetResultData();
    case DEBUG_DATA:
      return isSetDebugData();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TApiResult)
      return this.equals((TApiResult)that);
    return false;
  }

  public boolean equals(TApiResult that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_status = true;
    boolean that_present_status = true;
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (this.status != that.status)
        return false;
    }

    boolean this_present_message = true && this.isSetMessage();
    boolean that_present_message = true && that.isSetMessage();
    if (this_present_message || that_present_message) {
      if (!(this_present_message && that_present_message))
        return false;
      if (!this.message.equals(that.message))
        return false;
    }

    boolean this_present_dataType = true && this.isSetDataType();
    boolean that_present_dataType = true && that.isSetDataType();
    if (this_present_dataType || that_present_dataType) {
      if (!(this_present_dataType && that_present_dataType))
        return false;
      if (!this.dataType.equals(that.dataType))
        return false;
    }

    boolean this_present_resultData = true && this.isSetResultData();
    boolean that_present_resultData = true && that.isSetResultData();
    if (this_present_resultData || that_present_resultData) {
      if (!(this_present_resultData && that_present_resultData))
        return false;
      if (!this.resultData.equals(that.resultData))
        return false;
    }

    boolean this_present_debugData = true && this.isSetDebugData();
    boolean that_present_debugData = true && that.isSetDebugData();
    if (this_present_debugData || that_present_debugData) {
      if (!(this_present_debugData && that_present_debugData))
        return false;
      if (!this.debugData.equals(that.debugData))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + status;

    hashCode = hashCode * 8191 + ((isSetMessage()) ? 131071 : 524287);
    if (isSetMessage())
      hashCode = hashCode * 8191 + message.hashCode();

    hashCode = hashCode * 8191 + ((isSetDataType()) ? 131071 : 524287);
    if (isSetDataType())
      hashCode = hashCode * 8191 + dataType.getValue();

    hashCode = hashCode * 8191 + ((isSetResultData()) ? 131071 : 524287);
    if (isSetResultData())
      hashCode = hashCode * 8191 + resultData.hashCode();

    hashCode = hashCode * 8191 + ((isSetDebugData()) ? 131071 : 524287);
    if (isSetDebugData())
      hashCode = hashCode * 8191 + debugData.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TApiResult other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMessage()).compareTo(other.isSetMessage());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMessage()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.message, other.message);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDataType()).compareTo(other.isSetDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetResultData()).compareTo(other.isSetResultData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetResultData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.resultData, other.resultData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDebugData()).compareTo(other.isSetDebugData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDebugData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.debugData, other.debugData);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TApiResult(");
    boolean first = true;

    sb.append("status:");
    sb.append(this.status);
    first = false;
    if (isSetMessage()) {
      if (!first) sb.append(", ");
      sb.append("message:");
      if (this.message == null) {
        sb.append("null");
      } else {
        sb.append(this.message);
      }
      first = false;
    }
    if (isSetDataType()) {
      if (!first) sb.append(", ");
      sb.append("dataType:");
      if (this.dataType == null) {
        sb.append("null");
      } else {
        sb.append(this.dataType);
      }
      first = false;
    }
    if (isSetResultData()) {
      if (!first) sb.append(", ");
      sb.append("resultData:");
      if (this.resultData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.resultData, sb);
      }
      first = false;
    }
    if (isSetDebugData()) {
      if (!first) sb.append(", ");
      sb.append("debugData:");
      if (this.debugData == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.debugData, sb);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TApiResultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TApiResultStandardScheme getScheme() {
      return new TApiResultStandardScheme();
    }
  }

  private static class TApiResultStandardScheme extends org.apache.thrift.scheme.StandardScheme<TApiResult> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TApiResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = iprot.readI32();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MESSAGE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.message = iprot.readString();
              struct.setMessageIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dataType = thrift.def.TDataEncodingType.findByValue(iprot.readI32());
              struct.setDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // RESULT_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.resultData = iprot.readBinary();
              struct.setResultDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DEBUG_DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.debugData = iprot.readBinary();
              struct.setDebugDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TApiResult struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(STATUS_FIELD_DESC);
      oprot.writeI32(struct.status);
      oprot.writeFieldEnd();
      if (struct.message != null) {
        if (struct.isSetMessage()) {
          oprot.writeFieldBegin(MESSAGE_FIELD_DESC);
          oprot.writeString(struct.message);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataType != null) {
        if (struct.isSetDataType()) {
          oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
          oprot.writeI32(struct.dataType.getValue());
          oprot.writeFieldEnd();
        }
      }
      if (struct.resultData != null) {
        if (struct.isSetResultData()) {
          oprot.writeFieldBegin(RESULT_DATA_FIELD_DESC);
          oprot.writeBinary(struct.resultData);
          oprot.writeFieldEnd();
        }
      }
      if (struct.debugData != null) {
        if (struct.isSetDebugData()) {
          oprot.writeFieldBegin(DEBUG_DATA_FIELD_DESC);
          oprot.writeBinary(struct.debugData);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TApiResultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TApiResultTupleScheme getScheme() {
      return new TApiResultTupleScheme();
    }
  }

  private static class TApiResultTupleScheme extends org.apache.thrift.scheme.TupleScheme<TApiResult> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TApiResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStatus()) {
        optionals.set(0);
      }
      if (struct.isSetMessage()) {
        optionals.set(1);
      }
      if (struct.isSetDataType()) {
        optionals.set(2);
      }
      if (struct.isSetResultData()) {
        optionals.set(3);
      }
      if (struct.isSetDebugData()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status);
      }
      if (struct.isSetMessage()) {
        oprot.writeString(struct.message);
      }
      if (struct.isSetDataType()) {
        oprot.writeI32(struct.dataType.getValue());
      }
      if (struct.isSetResultData()) {
        oprot.writeBinary(struct.resultData);
      }
      if (struct.isSetDebugData()) {
        oprot.writeBinary(struct.debugData);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TApiResult struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.status = iprot.readI32();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(1)) {
        struct.message = iprot.readString();
        struct.setMessageIsSet(true);
      }
      if (incoming.get(2)) {
        struct.dataType = thrift.def.TDataEncodingType.findByValue(iprot.readI32());
        struct.setDataTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.resultData = iprot.readBinary();
        struct.setResultDataIsSet(true);
      }
      if (incoming.get(4)) {
        struct.debugData = iprot.readBinary();
        struct.setDebugDataIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

